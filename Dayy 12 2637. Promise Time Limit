
/**
 * @param {Function} fn
 * @param {number} t
 * @return {Function}
 */
// fn= async(n)=>{
//     await new Promise(resolve=> setTimeout(resolve,100));
//     return n*n;
// }
// async(n): This indicates that the function is an asynchronous function, meaning it can use the await keyword to pause its execution while waiting for promises to resolve.

// await new Promise(resolve=> setTimeout(resolve,100)): This line creates a new Promise that resolves after a delay of 100 milliseconds. The setTimeout function is used to introduce this delay, and the resolve function is passed as the callback to be called when the delay is over. By using await, the function pauses here and resumes only after the promise is resolved (i.e., the 100 milliseconds have passed).

// return n * n;: Once the promise is resolved, this line of code is executed. It calculates the square of the input number n and returns the result.

var timeLimit = function(fn, t) {
    //so this will tell me if the async function passef eoth the given time limit 
    //the fn will have some time attached in setTimeout
    //and if that that time is less than time t then will return resolved with the return valuee
    //else rejected "tle"

	return async function(...args) {
        //function runs till t time and then returns time limit execced
        //else resolved
        MTHOD 1
    //    return  new Promise((resolve,reject)=>{
    //         //set timeout will reject after time t
    //         const id=setTimeout(()=>reject("Time Limit Exceeded"),t);
    //         fn(...args) 
    //            .then((res)=>resolve(res))
    //            .catch((rej)=>reject(rej))
    //            .finally(()=>clearTimeout(id))
            
  
    //     })
         METHOD 2
      return new Promise(async(resolve,reject)=>{
          const id=setTimeout( ()=>reject("Time Limit Exceeded"),t);
          try{
              const res=await fn(...args);
              resolve(res);
          }
          catch(err){
              reject(err);
          }
      })
    }

        
    
};

/**

 * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);
 * limited(150).catch(console.log) // "Time Limit Exceeded" at t=100ms
 */
