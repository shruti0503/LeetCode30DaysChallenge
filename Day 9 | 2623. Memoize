/**
 * @param {Function} fn
 */
 //we want to pass thesame computed value if function called for second time
 //else store it
function memoize(fn) {
    const cache={};
   
    
    return function(...args) {
        // Since the arguments are an array of numbers (i.e. valid JSON), a convenient way to convert them into a string key is with JSON.stringify().
     const key = JSON.stringify(args);
     if(key in cache){
         return cache[key];
     }
     cache[key]=fn(...args);
     return cache[key];
        
    }
}
// Let N be the number of times the function was called previously.

// Time complexity: O(1). Each time the memoized function is called, a single dictionary lookup is performed.

// Space complexity: O(N). In the worst case, all the previous arguments need to be stored.


/** 
 * let callCount = 0;
 * const memoizedFn = memoize(function (a, b) {
 *	 callCount += 1;
 *   return a + b;
 * })
 * memoizedFn(2, 3) // 5
 * memoizedFn(2, 3) // 5
 * console.log(callCount) // 1 
 */
