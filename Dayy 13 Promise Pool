The problem requires executing a set of asynchronous functions with a given pool limit and returning a promise that resolves when all the functions have resolved. 
We need to execute functions in parallel up to the pool limit, waiting for a function to resolve before executing the next one.

approach*************
As per question, I need to return asyncronous function promisePool. It should return a promise that resolves when all the input functions resolve.
so I'll create a new promise and return it.
We are supposed to make a queuing system to process the inputs from array, in order.
I can start traversing the array and keep a counter to know the current index I'm processing.
since I can only process n functions at once, I also need a counter to keep track of it, initially it can be 0.
I can start processing n functions from array and then stop processing until any of my function is done.
Once any of the function is done, it can notify me or call the function again.
Seems like I can use recrussion sort of concept here.
so in last, in my function I just need to check if I'm done processing all the function (my function counter can help here), 
if so, I can simply resolve the whole function.
********************
The promisePool function is defined as an asynchronous function, which means it returns a promise. It takes two parameters: functions and n.
Inside the promisePool function, a new promise is created using the Promise constructor. This promise will be resolved when all the promises in the functions array have been executed.
Two variables, inProgressCount and functionIndex, are initialized to track the progress of promise execution.
The helper function is defined, which will be called recursively to process the promises.
Inside the helper function, it first checks if the functionIndex has reached the end of the functions array. If so, it checks if all promises have been completed (inProgressCount === 0). If both conditions are met, it resolves the outer promise, indicating that all promises have been executed.
If the end of the functions array has not been reached, and the limit n allows for more promises to be executed, it enters a while loop.
In the loop, it increments inProgressCount to indicate that a new promise is being executed.
It retrieves the function from the functions array at the current functionIndex.
The functionIndex is then incremented to prepare for the next iteration.
The function is invoked, returning a promise, and assigned to the promise variable.
A then callback is attached to the promise, which will be executed when the promise is resolved.
Inside the then callback, inProgressCount is decremented to indicate that the current promise has been completed.
The helper function is recursively called again to process the next set of promises.
This loop continues until either the limit n is reached or all the promises in the functions array have been processed.
Finally, the helper function is called initially to start the execution of promises.
The outer promise created at the beginning is returned by the promisePool function, representing the overall completion of all promises.
Overall, the code executes a pool of promises concurrently, up to a specified limit n, and resolves the outer promise when all promises have been executed.

/**
 * @param {Function[]} functions
 * @param {number} n
 * @return {Function}
 */
var promisePool = async function(functions, n) {
    return new Promise((resolve)=>{
        let inprogress=0;
        let currindx=0;
        //recursive function that resolves the function item and continues to rsolve untill it reaches the base case
        function helper(){
            //base case
            if(currindx>=functions.length){
                if(inprogress===0) resolve();
                return;
            }
            while(inprogress<n && currindx<functions.length){
                inprogress++;
                const promise=functions[currindx]();
                currindx++;
                promise.then(()=>{
                    inprogress--;
                    helper();
                })
            }
            
        }
        helper();

    })

};

/**
 * const sleep = (t) => new Promise(res => setTimeout(res, t));
 * promisePool([() => sleep(500), () => sleep(400)], 1)
 *   .then(console.log) // After 900ms
 */
 
 For more:  https://leetcode.com/problems/promise-pool/solutions/3532412/code-animation-video-2-easy-beginner-friendly-dry-run-js-ts-concept-comments/
 
 
