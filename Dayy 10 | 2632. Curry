Partial application of function arguments is a technique in functional programming where a function is applied to some of its arguments,
resulting in a new function that takes the remaining arguments.
This allows for creating more specialized or customized versions of the original function.

In partial application, you supply a subset of the required arguments to a function, and it returns a new function that expects the remaining arguments. 
This new function can be called later with the remaining arguments to produce the final result.

Customizing API calls: Currying can help create more specific API calls based on a generic API call function.
const apiCall = baseUrl => endpoint => params =>
        fetch(`${baseUrl}${endpoint}`, { ...params });

const myApiCall = apiCall("https://my-api.com");
const getUser = myApiCall("/users");
const updateUser = myApiCall("/users/update");

// Usage:
getUser({ userId: 1 });
updateUser({ userId: 1, name: "John Doe" });
*************
Higher-order functions and functional composition: 
Currying enables the creation of higher-order functions that can be composed to create more complex functionality.
const compose = (f, g) => x => f(g(x));

const double = x => x * 2;
const square = x => x * x;

const doubleThenSquare = compose(square, double);

const result = doubleThenSquare(5); // (5 * 2)^2 = 100

**************


/**
 * @param {Function} fn
 * @return {Function}
 */
//  const add = a => b => a + b;
var curry = function(fn) {
   let nums=[];
// Inside the curry function, a local variable nums is declared and initialized as an empty array. This variable will store the arguments provided during partial function application.

// This inner function is the curried version of the original function fn.
    return function curried(...args) {
// ...args is a rest parameter that allows the curried function to accept any number of arguments.
       nums=[...nums,...args];
// nums = [...nums, ...args] appends the newly passed arguments to the nums array, effectively collecting all the arguments provided during partial function application.
       if(fn.length===nums.length){
// if (fn.length === nums.length) checks if the number of arguments provided (nums.length) matches the expected number of arguments of the original function (fn.length).
           const res=fn(...nums);
           nums=[];
           return res;
// If the numbers match, it means all the arguments have been collected, so the original function fn is invoked with 
// the collected arguments using the spread operator ...nums. The result is stored in a variable res.
// nums = [] resets the nums array to an empty array so
//  that it can be used again for the next function application.
// Finally, return res returns the result of invoking 
// the original function fn with the collected arguments.
       }
       else{
           return curried;
// If the numbers don't match, it means partial function application is still in progress. In this case, the curried function is returned again to allow for further argument collection.
//  This enables chaining of function calls until all arguments are provided.
       }
    }
};

var curry = function(fn) {
    return function curried(...args) {
        //base case
        if(args.length===fn.length){
            return fn(...args)
        }
        else{
            return function(...newArgs){
                return curried(...args,...newArgs);
            }
        }
// This new function accepts ...newArgs, which represents additional arguments provided during the partial application.
// The curried function is called recursively with the combined arguments
//  using the spread operator ...args and ...newArgs. 
//  This recursive call allows for the chaining of function calls until all arguments are provided.
// The process continues until all arguments are collected and the base case is satisfied.
// The curry function enables the creation of curried functions,
//  which can be used for partial function application and creating reusable functions with different argument configurations.

    }
};

/**
 * function sum(a, b) { return a + b; }
 * const csum = curry(sum);
 * csum(1)(2) // 3
 */
************************
If the condition is true, it means all the required arguments have been collected. 
In this case, the original function fn is invoked using the apply method.
The apply method is used to pass the arguments array args to the function, with this set to the current execution context 
(usually the value of this in the outer function).

If the condition is false, it means partial function application is still in progress. 
In this case, a new function is returned. This new function is created using the bind method, 
which allows you to partially apply arguments by creating a new function with pre-filled arguments.

The bind method is called on the curried function, and ...args is passed as the first argument. 
This pre-fills the existing arguments (...args) of the curried function and returns a new function that expects the remaining arguments.
The returned function is then used for further partial function application or can be called with the remaining arguments to produce the final result.

var curry = function (fn) {
  return function curried(...args) {
    if (args.length >= fn.length) {
      return fn.apply(this, args);
    }

    return curried.bind(this, ...args);
  };
};
**************
